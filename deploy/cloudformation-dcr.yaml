AWSTemplateFormatVersion: "2010-09-09"
Description: OAuth 2.0 Dynamic Client Registration (DCR) Lambda for Cognito User Pool

Parameters:
  FunctionName:
    Type: String
    Default: google-search-mcp-dcr
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID (e.g., us-east-1_XXXXXXXXX)
  InitialAccessToken:
    Type: String
    NoEcho: true
    Default: ""
    Description: Optional shared secret for DCR authorization (Bearer token)
  RequireInitialAccessToken:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"
  DefaultScopes:
    Type: String
    Default: "openid"
  AllowAuthCode:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
  AllowClientCredentials:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"
  CorsAllowOrigin:
    Type: String
    Default: "*"
  RoleArn:
    Type: String
    Default: ""
    Description: Optional existing role ARN; leave blank to create a new role
  S3Bucket:
    Type: String
    Description: S3 bucket containing the DCR Lambda zip
  S3Key:
    Type: String
    Description: S3 key for the DCR Lambda zip

Conditions:
  CreateRole: !Equals [!Ref RoleArn, ""]

Resources:
  DcrRole:
    Type: AWS::IAM::Role
    Condition: CreateRole
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoDcrInline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPoolClient
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}

  DcrFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: python3.12
      Handler: oauth_dcr_handler.handler
      Timeout: 30
      MemorySize: 256
      Role: !If [CreateRole, !GetAtt DcrRole.Arn, !Ref RoleArn]
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPoolId
          INITIAL_ACCESS_TOKEN: !Ref InitialAccessToken
          REQUIRE_INITIAL_ACCESS_TOKEN: !Ref RequireInitialAccessToken
          DEFAULT_SCOPES: !Ref DefaultScopes
          ALLOW_AUTH_CODE: !Ref AllowAuthCode
          ALLOW_CLIENT_CREDENTIALS: !Ref AllowClientCredentials
          CORS_ALLOW_ORIGIN: !Ref CorsAllowOrigin

  DcrFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt DcrFunction.Arn
      AuthType: NONE

  DcrPermissionUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DcrFunction.Arn
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

Outputs:
  DcrFunctionArn:
    Value: !GetAtt DcrFunction.Arn
  DcrFunctionUrl:
    Value: !GetAtt DcrFunctionUrl.FunctionUrl
