#!/usr/bin/env bash
set -euo pipefail

# Package, upload, and deploy the Lambda via CloudFormation.
#
# Usage:
#   ./deploy_aws_agentcore_auth0/deploy_lambda.sh <stack-name> <s3-bucket> [s3-prefix] [region]
#
# Notes:
# - If .deploy.env exists next to this script (in deploy_aws_agentcore_auth0/), its values are used as defaults.
# - Positional args always override .deploy.env.
# - After a successful parameter merge, the script writes .deploy.env in this folder so you can re-run without args.

# Repo root (used for loading .env)
REPO_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
# Project config and persisted deploy state live under the deploy folder
PROJECT_CONFIG="${DEPLOY_PROJECT_CONFIG:-$REPO_ROOT/deploy_aws_agentcore_auth0/deploy.project.env}"
PROJECT_DIR="$(dirname "$PROJECT_CONFIG")"
if [[ -f "$PROJECT_CONFIG" ]]; then
  echo "Loading project config from $PROJECT_CONFIG"
  # shellcheck disable=SC1090
  source "$PROJECT_CONFIG"
fi

# Load persistent deploy defaults if present (stored next to these scripts)
DEPLOY_ENV="$PROJECT_DIR/.deploy.env"
if [[ -f "$DEPLOY_ENV" ]]; then
  echo "Loading deploy defaults from $DEPLOY_ENV"
  # shellcheck disable=SC1090
  source "$DEPLOY_ENV"
fi

# Merge CLI args over env defaults
STACK_NAME="${1:-${STACK_NAME:-}}"
S3_BUCKET="${2:-${S3_BUCKET:-}}"
S3_PREFIX="${3:-${S3_PREFIX:-}}"
REGION="${4:-${REGION:-}}"

# Validate required params present (after merging)
if [[ -z "${STACK_NAME:-}" || -z "${S3_BUCKET:-}" ]]; then
  echo "Usage: $0 <stack-name> <s3-bucket> [s3-prefix] [region]" >&2
  echo "Tip: you can also save defaults in $DEPLOY_ENV for future runs." >&2
  exit 2
fi

# Validate/normalize CloudFormation stack name: must match [A-Za-z][-A-Za-z0-9]* or be an ARN
if [[ "$STACK_NAME" != arn:* ]]; then
  if ! [[ "$STACK_NAME" =~ ^[A-Za-z][-A-Za-z0-9]*$ ]]; then
    SUGGESTED="${STACK_NAME//_/-}"
    if [[ "$SUGGESTED" =~ ^[A-Za-z][-A-Za-z0-9]*$ ]]; then
      echo "Stack name '$STACK_NAME' is invalid for CloudFormation (underscores not allowed). Using '$SUGGESTED' instead."
      STACK_NAME="$SUGGESTED"
    else
      echo "Invalid stack name '$STACK_NAME'. Allowed: [A-Za-z][-A-Za-z0-9]* or an ARN." >&2
      echo "Tip: replace underscores with hyphens, e.g., '${STACK_NAME//_/-}'" >&2
      exit 2
    fi
  fi
fi

# Persist the merged parameters so the next run can omit args
cat > "$DEPLOY_ENV" <<EOF
# Auto-generated by deploy_lambda.sh on $(date -u +%Y-%m-%dT%H:%M:%SZ)
STACK_NAME="$STACK_NAME"
S3_BUCKET="$S3_BUCKET"
S3_PREFIX="${S3_PREFIX:-}"
REGION="${REGION:-}"
# LAMBDA_FUNCTION_ARN will be set after successful deploy
EOF
echo "Saved parameters to $DEPLOY_ENV"

# Derive artifact/template defaults from project config if provided
_ARTIFACT_PATH="${ARTIFACT_PATH:-dist/lambda.zip}"
_TEMPLATE_FILE="${TEMPLATE_FILE:-deploy_aws_agentcore_auth0/cloudformation-lambda.yaml}"
_BUILD_CMD="${BUILD_CMD:-}" 

# Resolve paths relative to the project config directory if not absolute
case "$_ARTIFACT_PATH" in /*) DIST_ZIP="$_ARTIFACT_PATH" ;; *) DIST_ZIP="$PROJECT_DIR/$_ARTIFACT_PATH" ;; esac
case "$_TEMPLATE_FILE" in /*) TEMPLATE_FILE="$_TEMPLATE_FILE" ;; *) TEMPLATE_FILE="$PROJECT_DIR/$_TEMPLATE_FILE" ;; esac
if [[ -n "$_BUILD_CMD" ]]; then
  case "$_BUILD_CMD" in /*) RESOLVED_BUILD_CMD="$_BUILD_CMD" ;; *) RESOLVED_BUILD_CMD="$PROJECT_DIR/$_BUILD_CMD" ;; esac
else
  RESOLVED_BUILD_CMD=""
fi

AWSCMD=(aws)
if [[ -n "$REGION" ]]; then
  AWSCMD+=("--region" "$REGION")
fi
export AWS_PAGER=""
if [[ -f "$REPO_ROOT/.env" ]]; then
  echo "Loading environment from $REPO_ROOT/.env"
  set -a
  # shellcheck disable=SC1090
  source "$REPO_ROOT/.env"
  set +a
fi

# Build the ZIP for the target Lambda architecture (always rebuild to avoid arch mismatch)
# Map CloudFormation Architecture -> build script ARCH
# Prefer LAMBDA_ARCHITECTURE from project/local config, fallback to ARCHITECTURE env
case "${LAMBDA_ARCHITECTURE:-${ARCHITECTURE:-arm64}}" in
  arm64)
    BUILD_ARCH="arm64"
    ;;
  x86_64|amd64)
    BUILD_ARCH="x86_64"
    ;;
  *)
    echo "Unknown ARCHITECTURE='${ARCHITECTURE}'. Use 'arm64' or 'x86_64'." >&2
    exit 2
    ;;
esac

echo "Building ZIP for ARCHITECTURE='${LAMBDA_ARCHITECTURE:-${ARCHITECTURE:-arm64}}' (builder ARCH='${BUILD_ARCH}')..."
# Force Docker build to guarantee correct Linux target regardless of host OS/arch
if [[ -n "$RESOLVED_BUILD_CMD" ]]; then
  ARCH="${BUILD_ARCH}" FORCE_DOCKER=1 bash -lc "${RESOLVED_BUILD_CMD}"
else
  ARCH="${BUILD_ARCH}" FORCE_DOCKER=1 ./deploy_aws_agentcore_auth0/build_zip.sh
fi

TS="$(date +%Y%m%d-%H%M%S)"
BASE_KEY="${ARTIFACT_NAME_BASIS:-lambda_artifact}-${TS}.zip"
if [[ -n "$S3_PREFIX" ]]; then
  S3_KEY="$S3_PREFIX/$BASE_KEY"
else
  S3_KEY="$BASE_KEY"
fi
echo "Using S3 key: $S3_KEY"

"${AWSCMD[@]}" s3 cp "$DIST_ZIP" "s3://$S3_BUCKET/$S3_KEY"

# Secrets may be provided via .env; allow CFN_PARAM_* to be empty and omitted

FUNCTION_NAME="${LAMBDA_FUNCTION_NAME:-${FUNCTION_NAME:-}}"
ROLE_ARN="${ROLE_ARN:-}"
TIMEOUT="${TIMEOUT:-60}"
MEMORY="${MEMORY:-512}"
LOG_RETENTION="${LOG_RETENTION:-14}"
ARCHITECTURE="${LAMBDA_ARCHITECTURE:-${ARCHITECTURE:-arm64}}"

# Build CFN parameter overrides from CFN_PARAM_* in project/local envs
PARAMS=(
  "S3Bucket=$S3_BUCKET"
  "S3Key=$S3_KEY"
  "TimeoutSeconds=${LAMBDA_TIMEOUT:-$TIMEOUT}"
  "MemorySizeMB=${LAMBDA_MEMORY:-$MEMORY}"
  "LogRetentionDays=${LAMBDA_LOG_RETENTION:-${LOG_RETENTION:-14}}"
  "Architecture=$ARCHITECTURE"
)

# Include FunctionName only if provided (else allow template default)
if [[ -n "$FUNCTION_NAME" ]]; then
  PARAMS+=("FunctionName=$FUNCTION_NAME")
fi

# Append all CFN_PARAM_* as key=value if value is non-empty
while IFS='=' read -r key val; do
  [[ -z "$key" || -z "$val" ]] && continue
  PARAMS+=("${key#CFN_PARAM_}=$val")
done < <(env | grep -E '^CFN_PARAM_[A-Za-z0-9_]+' || true)

if [[ -n "$ROLE_ARN" ]]; then
  PARAMS+=("RoleArn=$ROLE_ARN")
fi

"${AWSCMD[@]}" cloudformation deploy \
  --stack-name "$STACK_NAME" \
  --template-file "$TEMPLATE_FILE" \
  --capabilities "${LAMBDA_CAPABILITIES:-${CAPABILITIES:-CAPABILITY_IAM}}" \
  --parameter-overrides "${PARAMS[@]}"

"${AWSCMD[@]}" cloudformation describe-stacks --stack-name "$STACK_NAME" \
  --query 'Stacks[0].Outputs' --output table || true

# Capture and persist the Lambda function ARN for later gateway setup
OUTPUT_ARN_KEY="${CFN_OUTPUT_FUNCTION_ARN_KEY:-FunctionArn}"
LAMBDA_FUNCTION_ARN=$("${AWSCMD[@]}" cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey==\`${OUTPUT_ARN_KEY}\`].OutputValue" \
  --output text 2>/dev/null || true)

if [[ -n "${LAMBDA_FUNCTION_ARN:-}" && "${LAMBDA_FUNCTION_ARN}" != "None" ]]; then
  cat > "$DEPLOY_ENV" <<EOF
# Auto-generated by deploy_lambda.sh on $(date -u +%Y-%m-%dT%H:%M:%SZ)
STACK_NAME="$STACK_NAME"
S3_BUCKET="$S3_BUCKET"
S3_PREFIX="${S3_PREFIX:-}"
REGION="${REGION:-}"
LAMBDA_FUNCTION_ARN="${LAMBDA_FUNCTION_ARN}"
EOF
  echo "Saved Lambda ARN to $DEPLOY_ENV"
else
  echo "Warning: Could not resolve Lambda FunctionArn output; .deploy.env not updated with ARN." >&2
fi
